# IP Address Logging for dgamelaunch

This document describes how to add IP address logging functionality to
dgamelaunch when using the SQLite backend.

## Overview

IP logging tracks the IP addresses of users connecting to dgamelaunch,
maintaining both current IP and historical data. This is useful for:

- Security monitoring and incident response
- Understanding user connection patterns
- Identifying shared accounts or suspicious activity
- Geographic analytics (with external IP geolocation)

## Prerequisites

- dgamelaunch compiled with SQLite support (`--enable-sqlite`)
- SQLite 3.x installed
- Appropriate environment variables available (SSH_CLIENT, SSH_CONNECTION)

## Implementation Steps

### 1. Update Database Schema

Run the provided SQL script against your dgamelaunch database:

```bash
sqlite3 /path/to/dgamelaunch.db < add_ip_logging.sql
```

This adds:
- `last_ip` and `last_login_time` columns to `dglusers` table
- `user_ip_history` table for tracking IP history
- Useful views for querying IP data

### 2. Apply Code Changes

The implementation requires modifications to dgamelaunch.c to:
- Extract IP address from environment variables
- Update user records with IP on login
- Log IP history for tracking

Key functions added:
- `get_client_ip()` - Extracts IP from SSH_CLIENT/SSH_CONNECTION
- `log_user_ip()` - Records IP in history table
- `log_failed_login()` - Optional failed login tracking

### 3. Configuration

IP logging is enabled by default. To disable, add to your config:
```
# Disable IP logging (not yet implemented in config parser)
# ip_logging = no
```

## Usage Examples

### View Recent Logins
```sql
SELECT * FROM user_latest_ips ORDER BY last_login DESC LIMIT 20;
```

### Check User's IP History
```sql
SELECT * FROM user_all_ips WHERE username='someuser';
```

### Find Users from Same IP
```sql
SELECT DISTINCT username FROM user_ip_history 
WHERE ip_address='192.168.1.100' 
ORDER BY last_seen DESC;
```

### Suspicious Activity Detection
```sql
-- Users with many different IPs
SELECT username, COUNT(DISTINCT ip_address) as ip_count 
FROM user_ip_history 
GROUP BY username 
HAVING ip_count > 10 
ORDER BY ip_count DESC;

-- Recent rapid IP changes
SELECT username, COUNT(DISTINCT ip_address) as ips_last_day
FROM user_ip_history
WHERE last_seen > strftime('%s', 'now', '-1 day')
GROUP BY username
HAVING ips_last_day > 3;
```

## Privacy Considerations

- IP addresses are personal data in many jurisdictions (GDPR, etc.)
- Consider implementing:
  - IP retention policies (auto-delete after X days)
  - User consent notifications
  - Data export capabilities for user requests
  - Anonymization options (hash IPs after X days)

Example retention policy implementation:
```sql
-- Delete IP history older than 90 days
DELETE FROM user_ip_history 
WHERE last_seen < strftime('%s', 'now', '-90 days');
```

## Security Notes

1. **Environment Variables**: The implementation relies on SSH_CLIENT and
   SSH_CONNECTION environment variables. These are set by sshd but may
   not be available with all connection methods.

2. **Proxy Considerations**: If dgamelaunch runs behind a proxy, you may
   need to extract IPs from different sources (X-Forwarded-For headers
   for web-based terminals).

3. **IPv6 Support**: The current implementation handles both IPv4 and
   IPv6 addresses.

## Troubleshooting

### No IP Addresses Recorded
- Check if SSH_CLIENT environment variable is available
- Verify database schema was updated correctly
- Ensure SQLite has write permissions

### Performance Issues
- Add indexes if not created by the SQL script
- Consider archiving old IP history records
- Use connection pooling for high-traffic servers

## Future Enhancements

1. **Configuration Options**:
   - Enable/disable via dgamelaunch.conf
   - Configurable retention period
   - Choice of environment variables to check

2. **Extended Logging**:
   - Failed login attempts to separate table
   - Game session start/end with IP
   - GeoIP integration for country detection

3. **Admin Interface**:
   - Web dashboard for IP analytics
   - Automated alerts for suspicious patterns
   - Integration with fail2ban or similar

## Testing

Test the implementation:

```bash
# Set test environment
export SSH_CLIENT="192.168.1.100 54321 22"

# Run test program
gcc -DTEST_GET_CLIENT_IP -o test-ip get_client_ip.c
./test-ip

# Check database after login
sqlite3 /tmp/dgl-test/dgamelaunch.db \
  "SELECT username, last_ip, datetime(last_login_time, 'unixepoch') FROM dglusers;"
```

## Files Included

- `add_ip_logging.sql` - Database schema changes
- `get_client_ip.c` - Standalone function for IP extraction  
- `ip_logging.patch` - Patch file with code changes
- `README.ip_logging` - This documentation

## License

This IP logging implementation follows the same license as dgamelaunch
(GPL v2 or later).