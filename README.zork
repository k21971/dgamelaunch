# Adding Zork I to dgamelaunch

This guide explains how to integrate Zork I (and other Z-machine games)
into dgamelaunch.

## Overview

Zork I is a classic text adventure game that runs on the Z-machine
virtual machine. To play it through dgamelaunch, we use `frotz` which
provides a full-featured interface with status line, colors, and dynamic
terminal sizing.

## Important Requirements

1. **No shell in chroot**: Most dgamelaunch chroots don't include `/bin/sh`,
   so we use a compiled C wrapper instead of a shell script
2. **Required config field**: The `inprogressdir` field MUST be defined in
   the game DEFINE block or dgamelaunch will segfault

## Quick Start

1. Ensure you have the Zork I data file (`Zork1.dat`)
2. Compile the wrapper:
   ```bash
   gcc -O2 -Wall -o zork1-wrapper zork1-wrapper.c
   ```
3. Copy files to chroot (adjust paths as needed):
   ```bash
   sudo cp zork1-wrapper /opt/nethack/chroot/bin/
   sudo chmod 755 /opt/nethack/chroot/bin/zork1-wrapper
   sudo mkdir -p /opt/nethack/chroot/zork1
   sudo cp Zork1.dat /opt/nethack/chroot/zork1/
   ```
4. Add the Zork configuration to your dgamelaunch.conf (see below)
5. Create the inprogress directory:
   ```bash
   sudo mkdir -p /opt/nethack/chroot/dgldir/inprogress-zork1
   ```

## Files Included

- `zork1-wrapper.c` - C wrapper that handles per-user saves
- `examples/dgamelaunch-zork.conf` - Example configuration with Zork
- `README.zork` - This documentation

## Manual Setup

### 1. Install frotz/dfrotz
```bash
sudo apt-get install frotz
# This package includes both frotz and dfrotz
```

### 2. Copy frotz to chroot
```bash
sudo cp /usr/games/frotz /opt/nethack/chroot/bin/
```

### 3. Copy required libraries
frotz needs certain shared libraries. Find them with:
```bash
ldd /usr/games/frotz
```

Copy each library to the corresponding location in the chroot.

In addition to the standard libraries needed for nethack, frotz requires
these audio-related libraries:
- libao.so.4 - Audio output library
- libsndfile.so.1 - Sound file I/O library
- libmodplug.so.1 - Module music library
- libsamplerate.so.0 - Audio sample rate converter
- libFLAC.so.12 - FLAC audio codec
- libvorbis.so.0, libvorbisenc.so.2 - Vorbis audio codec
- libopus.so.0 - Opus audio codec
- libogg.so.0 - Ogg container format
- libmpg123.so.0 - MP3 decoder
- libmp3lame.so.0 - MP3 encoder
- libmvec.so.1 - Vector math library

### 4. Add to dgamelaunch.conf

Add this DEFINE block:

```
DEFINE {
    game_path = "/bin/zork1-wrapper"
    game_name = "Zork I: The Great Underground Empire"
    short_name = "zork1"
    game_id = "ZORK1"
    
    # REQUIRED - dgamelaunch will segfault without this
    inprogressdir = "%rinprogress-zork1/"
    
    max_idle_time = 3600
    
    # User directory structure: /dgldir/userdata/{first_letter}/{username}/zork
    ttyrecdir = "%ruserdata/%N/%n/zork/ttyrec/"
    
    commands = mkdir "%ruserdata/%N/%n/zork",
               mkdir "%ruserdata/%N/%n/zork/ttyrec",
               setenv "DGL_USER" "%n",
               setenv "HOME" "%ruserdata/%N/%n/zork"
    
    encoding = "ascii"
    
    # Optional: compress ttyrecs after game
    postcommands = exec "/bin/gzip" "%t"
}
```

Add menu entry:
```
commands["z"] = play_game "zork1"
```

## How the C Wrapper Works

The `zork1-wrapper.c` program:
1. Gets username from `DGL_USER` environment variable
2. Extracts first character for the `%N` directory
3. Creates directory structure: `/dgldir/userdata/{initial}/{username}/zork`
4. Changes to that directory for saves
5. Executes frotz with the game file

## Directory Structure

User data is organized as:
```
/dgldir/userdata/
├── j/
│   └── johndoe/
│       └── zork/
│           ├── ttyrec/
│           └── *.sav (save files)
└── m/
    └── mary/
        └── zork/
            ├── ttyrec/
            └── *.sav (save files)
```

## Save Games

- Save games are stored in `/dgldir/userdata/{initial}/{username}/zork/`
- Each user's saves are isolated
- Use the SAVE and RESTORE commands within Zork

## Troubleshooting

### Connection closes immediately
1. Check if `inprogressdir` is defined in the DEFINE block
2. Verify the wrapper is compiled and in the correct location
3. Check that frotz and Zork1.dat exist in the chroot

### "Cannot open story file"
The path to Zork1.dat in the wrapper must be relative to the chroot root.
If Zork1.dat is at `/opt/nethack/chroot/zork1/Zork1.dat`, the wrapper
should use `/zork1/Zork1.dat`.

### Libraries not found
Run `ldd /opt/nethack/chroot/bin/frotz` to check for missing
libraries in the chroot. Remember that frotz requires many audio
libraries even though Zork doesn't use sound.

## Adding More Z-Machine Games

To add other Infocom games:

1. Copy the game file to the chroot
2. Copy and modify zork1-wrapper.c for the new game
3. Compile the new wrapper
4. Add a new DEFINE block in dgamelaunch.conf
5. Add a menu entry

Example for Zork II:
```c
// In zork2-wrapper.c, change:
snprintf(zork_dat, sizeof(zork_dat), "/zork2/Zork2.dat");
```

## Security Considerations

- Each user's saves are completely isolated by changing to their directory
- No access to system files or other users' data
- The wrapper runs with dropped privileges via dgamelaunch
- Frotz displays with white text on blue background for nostalgia

## Technical Notes

- The wrapper is written in C because most dgamelaunch chroots don't
  include a shell interpreter
- The `%N` variable is the first character of the username (case-sensitive)
- The `%n` variable is the full username
- Always test outside dgamelaunch first: 
  `sudo chroot /path/to/chroot /bin/zork1-wrapper`

## Credits

- Zork I was created by Infocom
- Frotz Z-machine interpreter by Stefan Jokisch and others
- dgamelaunch C wrapper implementation for HDF (Hardfought)